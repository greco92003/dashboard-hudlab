import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/utils/supabase/server";

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient();

    // Get query parameters
    const { searchParams } = new URL(request.url);
    const brandFilter = searchParams.get("brand");

    // Check authentication
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Check if user is approved and has permission to view coupons
    const { data: profile, error: profileError } = await supabase
      .from("user_profiles")
      .select("approved, role, assigned_brand")
      .eq("id", user.id)
      .single();

    if (profileError || !profile?.approved) {
      return NextResponse.json({ error: "User not approved" }, { status: 403 });
    }

    // Check if user has permission to view coupons
    const allowedRoles = ["owner", "admin", "manager", "partners-media"];
    if (!allowedRoles.includes(profile.role)) {
      return NextResponse.json(
        { error: "Insufficient permissions" },
        { status: 403 }
      );
    }

    let query = supabase
      .from("generated_coupons")
      .select(
        `
        id,
        code,
        percentage,
        brand,
        valid_until,
        max_uses,
        current_uses,
        nuvemshop_status,
        is_active,
        is_auto_generated,
        created_at
      `
      )
      .eq("is_active", true)
      .order("created_at", { ascending: false });

    // Apply brand filtering based on user role and request parameters
    if (profile.role === "partners-media" && profile.assigned_brand) {
      // Partners-media users can only see coupons for their assigned brand
      query = query.eq("brand", profile.assigned_brand);
    } else if (
      ["owner", "admin", "manager"].includes(profile.role) &&
      brandFilter &&
      brandFilter !== "all"
    ) {
      // Owners/admins/managers can filter by any brand when specified
      // "all" means show all coupons (no filter)
      query = query.eq("brand", brandFilter);
      console.log(`Filtering coupons by brand: ${brandFilter}`);
    }
    // If no brand filter is specified or brandFilter is "all", show all coupons

    const { data: coupons, error: couponsError } = await query;

    if (couponsError) {
      console.error("Error fetching coupons:", couponsError);
      return NextResponse.json(
        { error: "Failed to fetch coupons" },
        { status: 500 }
      );
    }

    // Transform data for frontend
    const transformedCoupons = (coupons || []).map((coupon) => ({
      code: coupon.code,
      percentage: coupon.percentage,
      validUntil: coupon.valid_until,
      maxUses: coupon.max_uses,
      currentUses: coupon.current_uses,
      status: coupon.nuvemshop_status,
      brand: coupon.brand,
      isAutoGenerated: coupon.is_auto_generated,
      createdAt: coupon.created_at,
    }));

    return NextResponse.json({
      success: true,
      coupons: transformedCoupons,
    });
  } catch (error) {
    console.error("Error in coupons GET:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
