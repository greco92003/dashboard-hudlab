-- Create generated_coupons table for tracking partner-generated coupons
CREATE TABLE IF NOT EXISTS generated_coupons (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  
  -- Coupon information
  code TEXT NOT NULL UNIQUE,
  percentage INTEGER NOT NULL CHECK (percentage > 0 AND percentage <= 15),
  brand TEXT NOT NULL,
  
  -- Validity and usage
  valid_until TIMESTAMP WITH TIME ZONE NOT NULL,
  max_uses INTEGER DEFAULT 100,
  current_uses INTEGER DEFAULT 0,
  
  -- Nuvemshop integration
  nuvemshop_coupon_id TEXT, -- ID returned by Nuvemshop API
  nuvemshop_status TEXT DEFAULT 'pending' CHECK (nuvemshop_status IN ('pending', 'created', 'error')),
  nuvemshop_error TEXT,
  
  -- Creator information
  created_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  created_by_brand TEXT, -- Brand of the user who created this coupon
  
  -- Status
  is_active BOOLEAN DEFAULT true,
  
  -- Timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_generated_coupons_code ON generated_coupons(code);
CREATE INDEX IF NOT EXISTS idx_generated_coupons_brand ON generated_coupons(brand);
CREATE INDEX IF NOT EXISTS idx_generated_coupons_created_by ON generated_coupons(created_by);
CREATE INDEX IF NOT EXISTS idx_generated_coupons_valid_until ON generated_coupons(valid_until);
CREATE INDEX IF NOT EXISTS idx_generated_coupons_active ON generated_coupons(is_active);
CREATE INDEX IF NOT EXISTS idx_generated_coupons_nuvemshop_status ON generated_coupons(nuvemshop_status);

-- Enable RLS
ALTER TABLE generated_coupons ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Allow users to read their own generated coupons
CREATE POLICY "Allow users to read their own generated coupons"
ON generated_coupons
FOR SELECT
TO authenticated
USING (created_by = auth.uid());

-- Allow partners-media to read coupons for their assigned brand
CREATE POLICY "Allow partners-media to read coupons for their brand"
ON generated_coupons
FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE user_profiles.id = auth.uid() 
    AND user_profiles.role = 'partners-media'
    AND user_profiles.assigned_brand = generated_coupons.brand
    AND user_profiles.approved = true
  )
);

-- Allow admin and owner to read all coupons
CREATE POLICY "Allow admin and owner to read all coupons"
ON generated_coupons
FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE user_profiles.id = auth.uid() 
    AND user_profiles.role IN ('admin', 'owner')
    AND user_profiles.approved = true
  )
);

-- DEPRECATED: Allow partners-media to create coupons for their assigned brand
-- This policy has been removed - only owners and admins can create coupons now
-- Use the script remove_partners_media_coupon_creation.sql to update policies
/*
CREATE POLICY "Allow partners-media to create coupons for their brand"
ON generated_coupons
FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM user_profiles
    WHERE user_profiles.id = auth.uid()
    AND user_profiles.role = 'partners-media'
    AND user_profiles.assigned_brand = generated_coupons.brand
    AND user_profiles.approved = true
  )
  AND created_by = auth.uid()
  AND created_by_brand = brand
);
*/

-- Allow admin and owner to create coupons for any brand
CREATE POLICY "Allow admin and owner to create coupons for any brand"
ON generated_coupons
FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM user_profiles 
    WHERE user_profiles.id = auth.uid() 
    AND user_profiles.role IN ('admin', 'owner')
    AND user_profiles.approved = true
  )
  AND created_by = auth.uid()
);

-- Allow users to update their own coupons (for status updates)
CREATE POLICY "Allow users to update their own coupons"
ON generated_coupons
FOR UPDATE
TO authenticated
USING (created_by = auth.uid());

-- Add comments
COMMENT ON TABLE generated_coupons IS 'Stores coupons generated by owners and admins. Partners-media can only view coupons for their assigned brands.';
COMMENT ON COLUMN generated_coupons.code IS 'Unique coupon code generated for the partner';
COMMENT ON COLUMN generated_coupons.percentage IS 'Discount percentage (1-15%)';
COMMENT ON COLUMN generated_coupons.brand IS 'Brand that this coupon applies to';
COMMENT ON COLUMN generated_coupons.valid_until IS 'Expiration date of the coupon';
COMMENT ON COLUMN generated_coupons.max_uses IS 'Maximum number of times this coupon can be used';
COMMENT ON COLUMN generated_coupons.current_uses IS 'Current number of times this coupon has been used';
COMMENT ON COLUMN generated_coupons.nuvemshop_coupon_id IS 'ID of the coupon in Nuvemshop system';
COMMENT ON COLUMN generated_coupons.nuvemshop_status IS 'Status of coupon creation in Nuvemshop';
COMMENT ON COLUMN generated_coupons.created_by IS 'User who generated this coupon';
COMMENT ON COLUMN generated_coupons.created_by_brand IS 'Brand of the user who created this coupon';

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_generated_coupons_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updated_at
CREATE TRIGGER trigger_generated_coupons_updated_at
  BEFORE UPDATE ON generated_coupons
  FOR EACH ROW
  EXECUTE FUNCTION update_generated_coupons_updated_at();

-- Create function to generate unique coupon codes
CREATE OR REPLACE FUNCTION generate_coupon_code(brand_name TEXT, percentage INTEGER)
RETURNS TEXT AS $$
DECLARE
  base_code TEXT;
  final_code TEXT;
  counter INTEGER := 1;
BEGIN
  -- Create base code from brand name and percentage
  base_code := UPPER(SUBSTRING(REGEXP_REPLACE(brand_name, '[^A-Za-z0-9]', '', 'g'), 1, 4)) || percentage::TEXT;
  
  -- Ensure we have at least 4 characters
  IF LENGTH(base_code) < 6 THEN
    base_code := base_code || 'DISC';
  END IF;
  
  final_code := base_code;
  
  -- Check for uniqueness and add counter if needed
  WHILE EXISTS (SELECT 1 FROM generated_coupons WHERE code = final_code) LOOP
    final_code := base_code || counter::TEXT;
    counter := counter + 1;
  END LOOP;
  
  RETURN final_code;
END;
$$ LANGUAGE plpgsql;
